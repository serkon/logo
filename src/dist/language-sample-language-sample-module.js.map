{"version":3,"sources":["webpack:///./node_modules/@logo-software/language/fesm5/logo-software-language.js","webpack:///./projects/samples/src/app/logo/language-sample/language-showcase/language-showcase.component.html","webpack:///./projects/samples/src/app/logo/language-sample/language-sample-routing.module.ts","webpack:///./projects/samples/src/app/logo/language-sample/language-sample.module.ts","webpack:///./projects/samples/src/app/logo/language-sample/language-showcase/language-showcase.component.scss","webpack:///./projects/samples/src/app/logo/language-sample/language-showcase/language-showcase.component.ts","webpack:///./src/assets lazy ^\\.\\/.*$ namespace object"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACG;AAC2C;AAC9C;;AAE/C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD,kDAAkD,iCAAiC;AACnF,kDAAkD,2DAA2D;AAC7G,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD,kDAAkD,iCAAiC;AACnF,kDAAkD,2DAA2D;AAC7G,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,aAAa,gDAAgD;AAC7D,aAAa,+CAA+C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,2DAA2D,EAAE;AAC1F;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAWV;AACD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAQV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAMV;AACD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,2BAA2B,EAAE;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wBAAwB;AACxB;AACA,yBAAyB,wDAAwD,EAAE;AACnF;AACA,wBAAwB;AACxB;AACA,yBAAyB,wDAAwD,EAAE;AACnF;AACA,oBAAoB;AACpB;AACA,qBAAqB,iBAAiB,EAAE;AACxC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA,mBAAmB,yDAAW;AAC9B,8DAA8D,yBAAyB,GAAG,sBAAsB;AAChH,kEAAkE,uBAAuB,GAAG,yBAAyB,GAAG,sBAAsB;AAC9I,gBAAgB,8DAAO,IAAyB,wFAAwF,CAAC;AACzI;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,uDAAuD;AACvD,SAAS,OAAO,+DAAU,EAAE;AAC5B,SAAS;AACT,MAAM;AACN;AACA,CAAC;AACD,WAAW,EAeV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oCAAoC,EAAE,0BAA0B,EAAE,MAAM,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oCAAoC,EAAE,0BAA0B,EAAE,MAAM,EAAE;AAC1E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oCAAoC,EAAE,0BAA0B,EAAE,MAAM,EAAE;AAC1E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,yEAAyE,mBAAmB;AAC5F,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,yEAAyE,gBAAgB;AACzF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,kDAAkD;AAClD,SAAS,8BAA8B;AACvC,SAAS;AACT,MAAM;AACN;AACA,CAAC;AACD,WAAW,EAkBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAA8C;AACtD;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,kDAAI;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C;AAC/C,SAAS;AACT,MAAM;AACN;AACA,CAAC;AACD,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAkBV;AACD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EA2BV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,8BAA8B,gFAAgF;AAC9G;AACA,IAAI;AACJ;AACA;AA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","file":"language-sample-language-sample-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable, Pipe, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { __awaiter, __generator } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.configuration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * @license\n * Copyright LOGO YAZILIM SANAYİ VE TİCARET A.Ş. All Rights Reserved.\n *\n * Save to the extent permitted by law, you may not use, copy, modify,\n * distribute or create derivative works of this material or any part\n * of it without the prior written consent of LOGO YAZILIM SANAYİ VE TİCARET A.Ş. Limited.\n * Any reproduction of this material must contain this notice.\n */\n/**\n * Creates LanguageConfiguration object which is used at LanguageService\n * This class added to LanguageModule and it accept config file as a provider\n * You can set configuration from your app.module.ts\n *\n * Example:\n * const LANG = [LanguageModule.forRoot({abbr: 'tr'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: false'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: false, path: '/assets/languages'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: true'})];\n *\n * \\@NgModule({\n *  declarations: [AppComponent],\n *  imports: [BrowserModule, BrowserAnimationsModule, AppRoutingModule, LANG],\n *  providers: [],\n *  bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\nvar  /**\n * Creates LanguageConfiguration object which is used at LanguageService\n * This class added to LanguageModule and it accept config file as a provider\n * You can set configuration from your app.module.ts\n *\n * Example:\n * const LANG = [LanguageModule.forRoot({abbr: 'tr'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: false'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: false, path: '/assets/languages'})];\n * // or const MODULES = [LanguageModule.forRoot({abbr: 'tr', readFromFile: true'})];\n *\n * \\@NgModule({\n *  declarations: [AppComponent],\n *  imports: [BrowserModule, BrowserAnimationsModule, AppRoutingModule, LANG],\n *  providers: [],\n *  bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\nLanguageConfiguration = /** @class */ (function () {\n    function LanguageConfiguration() {\n        this.list = [\n            { abbr: 'en', code: 'en-EN', display: 'English' },\n            { abbr: 'tr', code: 'tr-TR', display: 'Türkçe' },\n        ];\n        this.default = this.list[0];\n        this.assetsPath = 'languages';\n        this.extension = 'json';\n        this.readFromFile = false;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.findLanguage = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return this.list.find((/**\n         * @param {?} language\n         * @return {?}\n         */\n        function (language) { return language.abbr === value || language.code === value; })) || null;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.setReadFromFile = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.readFromFile = !!value;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.setDefault = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.default = this.findLanguage(value) || this.list[0];\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.setPath = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        this.assetsPath = path;\n    };\n    /**\n     * @param {?} extension\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.setExtension = /**\n     * @param {?} extension\n     * @return {?}\n     */\n    function (extension) {\n        this.extension = extension;\n    };\n    /**\n     * @param {?} language\n     * @return {?}\n     */\n    LanguageConfiguration.prototype.addLanguage = /**\n     * @param {?} language\n     * @return {?}\n     */\n    function (language) {\n        /** @type {?} */\n        var getLang = this.findLanguage(language.abbr);\n        if (!getLang) {\n            this.list.push(language);\n        }\n        else {\n            /** @type {?} */\n            var index = this.list.indexOf(getLang);\n            if (index > -1) {\n                this.list[index] = language;\n            }\n        }\n    };\n    return LanguageConfiguration;\n}());\nif (false) {\n    /** @type {?} */\n    LanguageConfiguration.prototype.list;\n    /** @type {?} */\n    LanguageConfiguration.prototype.default;\n    /** @type {?} */\n    LanguageConfiguration.prototype.assetsPath;\n    /** @type {?} */\n    LanguageConfiguration.prototype.extension;\n    /** @type {?} */\n    LanguageConfiguration.prototype.readFromFile;\n}\n/**\n * @param {?} initSetting\n * @return {?}\n */\nfunction LanguageConfigurationFactory(initSetting) {\n    /** @type {?} */\n    var languageConfiguration = new LanguageConfiguration();\n    languageConfiguration.setDefault(initSetting && initSetting.abbr ? initSetting.abbr : 'en');\n    languageConfiguration.setPath(initSetting && initSetting.path ? initSetting.path : '/assets/languages');\n    languageConfiguration.setReadFromFile(!!initSetting && !!initSetting.readFromFile);\n    if (initSetting && initSetting.extension) {\n        languageConfiguration.setExtension(initSetting.extension);\n    }\n    return languageConfiguration;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nvar  /**\n * @abstract\n */\nLanguageLoader = /** @class */ (function () {\n    function LanguageLoader() {\n    }\n    return LanguageLoader;\n}());\nif (false) {\n    /**\n     * @abstract\n     * @param {?} lang\n     * @param {?} configuration\n     * @return {?}\n     */\n    LanguageLoader.prototype.getTranslation = function (lang, configuration) { };\n}\nvar LanguageHttpLoader = /** @class */ (function () {\n    function LanguageHttpLoader(http) {\n        this.http = http;\n    }\n    /**\n     * @param {?} lang\n     * @param {?} configuration\n     * @return {?}\n     */\n    LanguageHttpLoader.prototype.getTranslation = /**\n     * @param {?} lang\n     * @param {?} configuration\n     * @return {?}\n     */\n    function (lang, configuration) {\n        return this.http.get(configuration.assetsPath + \"/\" + (lang || configuration.default.code) + \".\" + configuration.extension);\n    };\n    return LanguageHttpLoader;\n}());\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguageHttpLoader.prototype.http;\n}\n/**\n * @param {?} http\n * @return {?}\n */\nfunction LanguageHttpLoaderFactory(http) {\n    return new LanguageHttpLoader(http);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: language.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction LanguageFile() { }\n/**\n * @param {?} file\n * @return {?}\n */\nfunction readFile(file) {\n    return new Promise((/**\n     * @param {?} resolve\n     * @param {?} reject\n     * @return {?}\n     */\n    function (resolve, reject) {\n        /** @type {?} */\n        var fr = new FileReader();\n        fr.onload = (/**\n         * @param {?} x\n         * @return {?}\n         */\n        function (x) { return resolve(fr.result); });\n        fr.readAsText(file);\n    }));\n}\nvar LanguageStoreService = /** @class */ (function () {\n    function LanguageStoreService(http, config) {\n        this.http = http;\n        this.config = config;\n        this.onLoadComplete = new EventEmitter();\n        this.file = {};\n        this.changeLanguage();\n    }\n    /**\n     * @return {?}\n     */\n    LanguageStoreService.prototype.changeLanguage = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var method = this.config.readFromFile ?\n            (/**\n             * @return {?}\n             */\n            function () { return _this.getLanguageFromPath(_this.config.default); }) :\n            (/**\n             * @return {?}\n             */\n            function () { return _this.getLanguageOverHttp(_this.config.default); });\n        window.setTimeout((/**\n         * @return {?}\n         */\n        function () { return method(); }), 0);\n    };\n    /**\n     * @param {?} language\n     * @return {?}\n     */\n    LanguageStoreService.prototype.getLanguageOverHttp = /**\n     * @param {?} language\n     * @return {?}\n     */\n    function (language) {\n        var _this = this;\n        /** @type {?} */\n        var path = \"assets/\" + this.config.assetsPath + \"/\" + (language.code || this.config.default.code) + \".\" + this.config.extension;\n        ((/** @type {?} */ (this.http.get(path)))).subscribe((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            _this.file = item;\n            _this.onLoadComplete.emit();\n        }));\n    };\n    /**\n     * @param {?} language\n     * @return {?}\n     */\n    LanguageStoreService.prototype.getLanguageFromPath = /**\n     * @param {?} language\n     * @return {?}\n     */\n    function (language) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                // import(`../../../../src/assets/languages/${this.config.default.code}.${this.config.extension}`)\n                // console.log(readFile(`../../../../src/assets/${this.config.assetsPath}/${this.config.default.code}.${this.config.extension}`));\n                import(\"../../../../src/assets/\" + this.config.assetsPath + \"/\" + this.config.default.code + \".\" + this.config.extension)\n                    .then((/**\n                 * @param {?} file\n                 * @return {?}\n                 */\n                function (file) {\n                    _this.file = file;\n                    _this.onLoadComplete.emit();\n                }));\n                return [2 /*return*/];\n            });\n        });\n    };\n    LanguageStoreService.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    LanguageStoreService.ctorParameters = function () { return [\n        { type: HttpClient },\n        { type: LanguageConfiguration }\n    ]; };\n    return LanguageStoreService;\n}());\nif (false) {\n    /** @type {?} */\n    LanguageStoreService.prototype.onLoadComplete;\n    /** @type {?} */\n    LanguageStoreService.prototype.file;\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguageStoreService.prototype.http;\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguageStoreService.prototype.config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Language Service need for translation operation. It is injectable.\n *\n * ```typescript\n * import {Component} from '\\@angular/core';\n * import {LanguageService} from '~/shared/services/language/language.service';\n * \\@Component({\n *  selector: 'app-home',\n *  templateUrl: 'home.page.html',\n *  styleUrls: ['home.page.scss'],\n *  })\n * export class HomePage {\n *    constructor(private language: LanguageService) {\n *      this.language.onLoadComplete.subscribe(() => {\n *        console.log(this.language.translate('hello_world'));\n *      });\n *    }\n *    change() {\n *      this.language.setLanguage('en');\n *    }\n *  }\n * ```\n *\n * \\@stacked-example(LanguageModule, logo/language/language-showcase/language-showcase.component)\n */\nvar LanguageService = /** @class */ (function () {\n    function LanguageService(configuration, store) {\n        this.configuration = configuration;\n        this.store = store;\n        /**\n         * This method triggered when data received\n         */\n        this.onLoadComplete = new EventEmitter();\n        this.language = this.configuration.default;\n        this.onLoadComplete = this.store.onLoadComplete;\n    }\n    Object.defineProperty(LanguageService.prototype, \"language\", {\n        /**\n         * Returns default Language\n         */\n        get: /**\n         * Returns default Language\n         * @return {?}\n         */\n        function () {\n            return this._language;\n        },\n        /**\n         * Sets default language\n         * @param lang language parameter setter\n         */\n        set: /**\n         * Sets default language\n         * @param {?} lang language parameter setter\n         * @return {?}\n         */\n        function (lang) {\n            this._language = lang;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets default language\n     * @param value Default language file will be set to this value\n     */\n    /**\n     * Sets default language\n     * @param {?} value Default language file will be set to this value\n     * @return {?}\n     */\n    LanguageService.prototype.setLanguage = /**\n     * Sets default language\n     * @param {?} value Default language file will be set to this value\n     * @return {?}\n     */\n    function (value) {\n        if (this.language.abbr !== value && this.language.code !== value) {\n            this.configuration.setDefault(value);\n            this.language = this.configuration.default;\n            this.store.changeLanguage();\n        }\n    };\n    /**\n     * Reload current language\n     */\n    /**\n     * Reload current language\n     * @param {?=} value\n     * @return {?}\n     */\n    LanguageService.prototype.reload = /**\n     * Reload current language\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        this.configuration.setDefault(value || this.configuration.default.abbr);\n        this.language = this.configuration.default;\n        this.store.changeLanguage();\n    };\n    /**\n     * Adds new language to scope\n     * @param language\n     */\n    /**\n     * Adds new language to scope\n     * @param {?} language\n     * @return {?}\n     */\n    LanguageService.prototype.addLanguage = /**\n     * Adds new language to scope\n     * @param {?} language\n     * @return {?}\n     */\n    function (language) {\n        this.configuration.addLanguage(language);\n    };\n    /**\n     * Returns Language of given abbr code\n     * @param value\n     */\n    /**\n     * Returns Language of given abbr code\n     * @param {?} value\n     * @return {?}\n     */\n    LanguageService.prototype.findLanguage = /**\n     * Returns Language of given abbr code\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return this.configuration.findLanguage(value);\n    };\n    /**\n     * Returns all Languages as an Array<Language>\n     */\n    /**\n     * Returns all Languages as an Array<Language>\n     * @return {?}\n     */\n    LanguageService.prototype.list = /**\n     * Returns all Languages as an Array<Language>\n     * @return {?}\n     */\n    function () {\n        return this.configuration.list;\n    };\n    /**\n     * Manually translate given key to default language with parameters. __Example:__\n     * ```typescript\n     * this.languageService.translate('user_info_text', ['Serkan', 'Logo Software', 2]);\n     * ```\n     * **en-En.json**\n     * ```JSON\n     * {  ...,\n     *    \"user_info_text\": \"Dear, {0} thanks for be a part of {1} for {3} year(s)\",\n     *    ...\n     * }\n     * ```\n     * This will render ~~\"Dear Serkan, thanks for be a part of Logo Software for 2 years\"~~\n     * @param key\n     * @param params\n     */\n    /**\n     * Manually translate given key to default language with parameters. __Example:__\n     * ```typescript\n     * this.languageService.translate('user_info_text', ['Serkan', 'Logo Software', 2]);\n     * ```\n     * **en-En.json**\n     * ```JSON\n     * {  ...,\n     *    \"user_info_text\": \"Dear, {0} thanks for be a part of {1} for {3} year(s)\",\n     *    ...\n     * }\n     * ```\n     * This will render ~~\"Dear Serkan, thanks for be a part of Logo Software for 2 years\"~~\n     * @param {?} key\n     * @param {?=} params\n     * @return {?}\n     */\n    LanguageService.prototype.translate = /**\n     * Manually translate given key to default language with parameters. __Example:__\n     * ```typescript\n     * this.languageService.translate('user_info_text', ['Serkan', 'Logo Software', 2]);\n     * ```\n     * **en-En.json**\n     * ```JSON\n     * {  ...,\n     *    \"user_info_text\": \"Dear, {0} thanks for be a part of {1} for {3} year(s)\",\n     *    ...\n     * }\n     * ```\n     * This will render ~~\"Dear Serkan, thanks for be a part of Logo Software for 2 years\"~~\n     * @param {?} key\n     * @param {?=} params\n     * @return {?}\n     */\n    function (key, params) {\n        /** @type {?} */\n        var translatedString = this.store.file[key] || key;\n        /** @type {?} */\n        var type = params !== null && typeof params !== 'undefined' ? params.constructor.name : null;\n        if (type === 'Array') {\n            params.forEach((/**\n             * @param {?} param\n             * @param {?} paramIndex\n             * @return {?}\n             */\n            function (param, paramIndex) {\n                translatedString = translatedString.replace(new RegExp(\"{\" + paramIndex + \"}\", 'g'), param);\n            }));\n        }\n        else if (type === 'Object') {\n            Object.keys(params).forEach((/**\n             * @param {?} keyName\n             * @param {?} index\n             * @return {?}\n             */\n            function (keyName, index) {\n                translatedString = translatedString.replace(new RegExp(\"{\" + keyName + \"}\", 'g'), params[keyName]);\n            }));\n        }\n        return translatedString;\n    };\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    LanguageService.prototype.getBrowserLang = /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    function () {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        var browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language;\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    };\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    LanguageService.prototype.getBrowserCultureLang = /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    function () {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        var browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language;\n        return browserCultureLang;\n    };\n    LanguageService.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    LanguageService.ctorParameters = function () { return [\n        { type: LanguageConfiguration },\n        { type: LanguageStoreService }\n    ]; };\n    return LanguageService;\n}());\nif (false) {\n    /**\n     * This method triggered when data received\n     * @type {?}\n     */\n    LanguageService.prototype.onLoadComplete;\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguageService.prototype._language;\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguageService.prototype.configuration;\n    /** @type {?} */\n    LanguageService.prototype.store;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Translate any text in html to defined language property.\n *\n * ```html\n * <p>{{\"hello_world_with_param\"| translate:['Mars']}}</p>\n * ```\n * In language file it contains `hello_world_with_param`. If not it would display key value.\n *\n * ```json\n * {\n *   \"hello_world_with_param\": \"Merhaba Dünyalı!, Ben {0}'tan sesleniyorum.\"\n * }\n * ```\n */\nvar LanguagePipe = /** @class */ (function () {\n    function LanguagePipe(language) {\n        this.language = language;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} params\n     * @return {?}\n     */\n    LanguagePipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?=} params\n     * @return {?}\n     */\n    function (value, params) {\n        return this.language.translate(value, params);\n    };\n    LanguagePipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'translate',\n                    pure: false,\n                },] }\n    ];\n    /** @nocollapse */\n    LanguagePipe.ctorParameters = function () { return [\n        { type: LanguageService }\n    ]; };\n    return LanguagePipe;\n}());\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    LanguagePipe.prototype.language;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * @license\n * Copyright LOGO YAZILIM SANAYİ VE TİCARET A.Ş. All Rights Reserved.\n *\n * Save to the extent permitted by law, you may not use, copy, modify,\n * distribute or create derivative works of this material or any part\n * of it without the prior written consent of LOGO YAZILIM SANAYİ VE TİCARET A.Ş. Limited.\n * Any reproduction of this material must contain this notice.\n */\n/**\n * Language file definition class\n */\nvar  /**\n * Language file definition class\n */\nLanguage = /** @class */ (function () {\n    function Language() {\n    }\n    return Language;\n}());\nif (false) {\n    /**\n     * [ISO Language Codes](https://www.w3schools.com/tags/ref_language_codes.asp) like 'en', 'tr' or 'ru'.\n     * @type {?}\n     */\n    Language.prototype.abbr;\n    /**\n     * Language code is contains [ISO Language Codes](https://www.w3schools.com/tags/ref_language_codes.asp) and\n     * [ISO Country Codes](https://www.w3schools.com/tags/ref_country_codes.asp) like 'en-GB'\n     * Click [here](https://en.wikipedia.org/wiki/Language_localisation) to show complete list\n     * @type {?}\n     */\n    Language.prototype.code;\n    /**\n     * The language name displayed on the screen.\n     * @type {?}\n     */\n    Language.prototype.display;\n}\n/**\n * Before AppModule bootstrap, LanguageInitSetting object must be defined.\n * Example:\n * ```typescript\n * const lang = {code: 'en-GB', extension: 'xyz', abbr: 'en', path:'/path/of/lang'}\n * ```\n * HTTP request will be send to the `http(s)://..../assets/lang/en-GB.xyz` address\n */\nvar  /**\n * Before AppModule bootstrap, LanguageInitSetting object must be defined.\n * Example:\n * ```typescript\n * const lang = {code: 'en-GB', extension: 'xyz', abbr: 'en', path:'/path/of/lang'}\n * ```\n * HTTP request will be send to the `http(s)://..../assets/lang/en-GB.xyz` address\n */\nLanguageInitSetting = /** @class */ (function () {\n    function LanguageInitSetting() {\n    }\n    return LanguageInitSetting;\n}());\nif (false) {\n    /**\n     * Codes for the Representation of Names of Languages are described at\n     * [ISO 639-1](http://www.loc.gov/standards/iso639-2/php/code_list.php) Code.\n     * @type {?}\n     */\n    LanguageInitSetting.prototype.abbr;\n    /**\n     * HTTP request path that contains language files.\n     * **Note:** When **readFromFile** is **true**, you must put your language files under\n     * your `src/assets/languages` folder. And this property will not effect the project.\n     * If **readFromFile** is **false**, You can set your language files path anywhere you request with path option.\n     * @type {?}\n     */\n    LanguageInitSetting.prototype.path;\n    /**\n     * If set readFromFile to true data will be load from file system and HTTP request will not call.\n     * Otherwise data will be requested over HTTP protocol. Default value is false.\n     * @type {?}\n     */\n    LanguageInitSetting.prototype.readFromFile;\n    /**\n     * The file extension will be download. Default is **json**.\n     * If change to another it will add to end of line this extension.\n     * @type {?}\n     */\n    LanguageInitSetting.prototype.extension;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/language.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar PIPES = [LanguagePipe];\n/**\n * Import Language Module to your main module. For example, import section on you NgModule:\n *\n * ```typescript\n * import { LanguageModule } from '\\@logo-software/language';\n *\n * \\@NgModule({\n *  imports: [\n *    CommonModule,\n *    LanguageModule.forRoot({ abbr: 'en', readFromFile: false, extension: 'json', path: '/assets/languages' }),\n *  ],\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar LanguageModule = /** @class */ (function () {\n    function LanguageModule(parentModule) {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    LanguageModule.forRoot = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        return {\n            ngModule: LanguageModule,\n            providers: [\n                LanguageStoreService,\n                LanguageService,\n                { provide: LanguageLoader, useFactory: LanguageHttpLoaderFactory, deps: [HttpClient] },\n                { provide: LanguageInitSetting, useValue: config },\n                { provide: LanguageConfiguration, useFactory: LanguageConfigurationFactory, deps: [LanguageInitSetting] },\n            ],\n        };\n    };\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    LanguageModule.forChild = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        return (/** @type {?} */ ({\n            ngModule: LanguageModule,\n            providers: [LanguageService],\n        }));\n    };\n    LanguageModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    providers: [],\n                    declarations: [LanguagePipe],\n                    exports: [LanguagePipe],\n                },] }\n    ];\n    /** @nocollapse */\n    LanguageModule.ctorParameters = function () { return [\n        { type: LanguageModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n    ]; };\n    return LanguageModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: logo-software-language.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Language, LanguageConfiguration, LanguageConfigurationFactory, LanguageHttpLoader, LanguageHttpLoaderFactory, LanguageInitSetting, LanguageLoader, LanguageModule, LanguagePipe, LanguageService, LanguageStoreService };\n//# sourceMappingURL=logo-software-language.js.map\n","module.exports = \"<nb-card>\\n  <nb-card-header>Translate text sample: <span [innerHTML]=\\\"'login-info' | translate | safeHTML\\\"></span>\\n  </nb-card-header>\\n  <nb-card-body class=\\\"example-items-rows\\\">\\n    <button (click)=\\\"setLanguage('tr')\\\" nbButton>Tr</button>\\n    <button (click)=\\\"setLanguage('en')\\\" nbButton>En</button>\\n    <button (click)=\\\"setLanguage('ro')\\\" nbButton>Ro</button>\\n    <button (click)=\\\"setLanguage('ru')\\\" disabled nbButton>Ru</button>\\n  </nb-card-body>\\n</nb-card>\\n\"","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LanguageShowcaseComponent } from './language-showcase/language-showcase.component';\n\nconst routes: Routes = [\n  {\n    path: 'language-showcase/language-showcase.component',\n    component: LanguageShowcaseComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LanguageSampleRoutingModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NbButtonModule, NbCardModule } from '@nebular/theme';\n\nimport { LanguageInitSetting, LanguageModule } from '@logo-software/language';\nimport { CoreModule } from '@logo-software/core';\nimport { LanguageSampleRoutingModule } from './language-sample-routing.module';\nimport { LanguageShowcaseComponent } from './language-showcase/language-showcase.component';\n\nconst languageConf: LanguageInitSetting = {\n  abbr: 'ro', readFromFile: false, extension: 'json', path: 'languages',\n};\n\n@NgModule({\n  declarations: [LanguageShowcaseComponent],\n  imports: [\n    CommonModule,\n    LanguageSampleRoutingModule,\n    NbButtonModule,\n    NbCardModule,\n    LanguageModule.forRoot(languageConf),\n    CoreModule.forRoot(),\n  ],\n})\nexport class LanguageSampleModule {\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9zYW1wbGVzL3NyYy9hcHAvbG9nby9sYW5ndWFnZS1zYW1wbGUvbGFuZ3VhZ2Utc2hvd2Nhc2UvbGFuZ3VhZ2Utc2hvd2Nhc2UuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component } from '@angular/core';\nimport { LanguageService } from '@logo-software/language';\n\n@Component({\n  selector: 'logo-language-showcase',\n  templateUrl: './language-showcase.component.html',\n  styleUrls: ['./language-showcase.component.scss'],\n})\nexport class LanguageShowcaseComponent {\n  constructor(private language: LanguageService) {\n    this.addLanguage();\n    this.language.onLoadComplete.subscribe(() => {\n      console.log(this.language.translate('hello_world'));\n    });\n  }\n\n  change() {\n    this.language.setLanguage('en');\n  }\n\n  setLanguage(lang: string = 'tr') {\n    this.language.setLanguage(lang);\n  }\n\n  addLanguage() {\n    this.language.addLanguage({abbr: 'ro', code: 'ro-RO', display: 'Romain'});\n  }\n}\n","var map = {\n\t\"./languages/en-EN.json\": [\n\t\t\"./src/assets/languages/en-EN.json\",\n\t\t0\n\t],\n\t\"./languages/ro-RO.json\": [\n\t\t\"./src/assets/languages/ro-RO.json\",\n\t\t1\n\t],\n\t\"./languages/tr-TR.json\": [\n\t\t\"./src/assets/languages/tr-TR.json\",\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/assets lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}