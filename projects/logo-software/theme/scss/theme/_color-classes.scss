$secondary-font-darkened: darken(color(#{secondary}-600), get("helper.font-darkener"));
$not-exist-state-list: "";
@each $d-state in get("states.default") {
  @if index(get("states.current"), $d-state) == null {
    $not-exist-state-list: $not-exist-state-list + "&:" + $d-state + ",";
  }
}

/**
  Template (fill): fill styles
 */
%fill {
}

/**
  Template (outline): outline styles
 */
%outline {
  @extend %ghost-outline;
  @extend %border;
}


/**
  Template (ghost): ghost styles
 */
%ghost {
  @extend %ghost-outline;
}

/**
  Template (outline & ghost): ghost and outline common styles
 */
%ghost-outline {
  @each $color, $value in get("color.list") { // colors
    &.#{$color} {
      background: none;
      $selected-color: '';
      @if ($color == secondary) {
        $selected-color: $secondary-font-darkened;
      } @else if ($color == gray) {
        $selected-color: var(--#{$color}-#{get("helper.dark-shade")});
      } @else if ($color == light) {
        $selected-color: var(--dark-#{get("helper.dark-shade")});
      } @else if ($color == dark) {
        $selected-color: var(--white);
      } @else {
        $selected-color: var(--#{$color});
      }
      color: $selected-color;
      $bg-color: "";
      @each $state in get("states.current") { // states
        // &:not(:disabled) {
        &:#{$state} {
          @if ($color == secondary) {
            $bg-color: rgba(var(--#{$color}-#{$state}-rgb), (color(ghost-#{$state}) + 0.2));
          } @else if ($color == light) {
            $bg-color: rgba(var(--light-hover-rgb), (color(ghost-#{$state}) + 0.2));
          } @else if ($color == dark) {
            $bg-color: rgba(var(--white-rgb), (color(ghost-#{$state}) + 0.2));
          } @else {
            $bg-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
          }
          background-color: $bg-color;
        }
        // }
      }

      @if get("bootstrap.status") {
        &:active, &:focus {
          color: $selected-color;
        }
      }
    }
  }
}


/**
  Template (outline): outline styles
 */
%border {
  @each $color, $value in get("color.list") {
    $border: size(1px) solid if($color == light, var(--light-600), if($color== secondary, var(--secondary-600), if($color == dark, var(--white), var(--#{$color}-500))));

    &.#{$color} {
      border: $border;

      &:hover, &:focus, &active {
        border: $border;
      }
    }
  }
}

/**
 Template (fill): extended fill styles
 */
@each $type in get("types") {
  @if ($type == fill) {
    %#{$type} {
      border: size(1px) solid transparent;
      @each $color, $color-value in get("color.list") {
        &.#{$color} {
          background-color: var(--#{$color}-500);
          color: if($color == light, var(--dark-#{get("helper.dark-shade")}), if($color == secondary, $secondary-font-darkened, var(--white)));
          @each $state in get("states.current") {
            &:#{$state} {
              background-color: var(--#{$color}-#{$state});
              border-color: transparent;
            }
          }
        }
      }

      &:active, &:focus {
        @include nb-outline(size(8px), rgba(var(--gray-600-rgb), color(ghost-hover)));
      }
    }
  }
}

/**
  All brand colors have shades(brand-50 to 900, etc.), shadowed, and selected color version.
 */
@each $color, $value in get("color.list") {
  .#{$color} {
    &.shadow {
      box-shadow: 0 size(7px) size(10px) size(-4px) var(--#{$color});
    }

    &.selected {
      outline: size(2px) solid var(--#{$color}-focus);
    }
  }

  @each $name, $ratio in get("color.shades") {
    $tempColor: if($name >= 500, shade($value, $ratio), tint($value, $ratio));
    .#{$color}-#{$name} {
      background-color: $tempColor;
    }
  }
}

/**
  Disabled element display setting
 */
:disabled {
  opacity: get("color.disabled-opacity");
  pointer-events: none;
}

/**
  Extend classes
 */
@if get("extend-colors")==true {
  #{get("selector")} {
    @each $type in get("types") {
      @each $color, $color-value in get("color.list") {
        @if ($type==fill) {
          .#{$color} {
            @extend %fill;
          }
        }
      }
    }
  }
}

#{get("selector")} {
  .fill {
    @extend %fill;
    @extend %fill.secondary;
  }

  .ghost {
    @extend %ghost;
    @extend %ghost.secondary;
  }

  .outline {
    @extend %outline;
    @extend %outline.secondary;
  }
}
