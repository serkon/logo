/**
Customize: Button customize colors
 */
%button-customize {
  @if get("customize.status") {
    @each $type in get("type") {
      @each $color in get("color.state") {
        $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
        #{$selector}, &-#{$type}-#{"" + $color} { // if type fill render just `color` class else render `outline.color` and `ghost.color` classes
          @if ($color == secondary or $color==basic or $color==gray or $color==light) {
            color: var(get("customize.element.button.font.color"));
          }
          @if $type == outline {
            border: size(1px) solid if($color==light, rgba(var(--light-rgb), 0.5), var(#{get("customize.element.button.border.default")}));
            &:active, &:focus, &:hover {
              border: size(1px) solid if($color==light, var(--light), var(#{get("customize.element.button.border.default")}));
            }
          }
          @if ($type==outline or $type==ghost) {
            @each $state in get('state.current') {
              &:#{$state} {
                background-color: rgba(var(--gray-900-rgb), var(--ghost-#{$state}));
              }
            }
          }
        }
      }
    }
  }
}

/**
Customize: Input secondary and basic customize
 */
%input-customize {
  @each $type in get("type") {
    @each $color in get("color.state") {
      @if ($color == secondary or $color == basic) {
        $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
        #{$selector}, &-#{$type}-#{"" + $color} {
          $temp: if(get("customize.status"), "customize.", "");
          color: var(#{get( $temp + "element.input.font.color")});
        }
      }
    }
  }
}
