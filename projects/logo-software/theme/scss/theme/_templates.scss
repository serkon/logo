/**
  Template (fill): fill styles
 */
// @debug join(get("color.state"), get("color.semantic"));

@function sat($color) {
  @return var(--#{$color}-900);
  // @return saturate(color(#{$color}-900), 2%);
}

%fill {
  font-family: get("font.family");
  border: size(1px) solid transparent;
  outline: none;
  @each $color, $value in get("color.state") {
    &-#{"" + $color} {
      background-color: var(--#{$color});
      // color: if($color == basic or $color==light or $color == secondary or $color == gray, mix-darkener($color), var(--white));
      color: if($color == basic or $color == light or $color == secondary or $color == gray, sat($color), var(--white));
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: var(--#{$color}-#{$state});
          // border-color: if($color == light, var(--light), var(--#{$color}-#{$state}));
        }
      }
    }
  }

  &:active, &:focus {
    @include nb-outline(size(8px), rgba(var(--gray-600-rgb), color(ghost-hover)));
  }
}

/**
  Template (outline): outline styles
 */
%outline {
  content: "";
  @each $color, $value in get("color.state") {
    &-#{"" + $color} {
      background-color: transparent;
      border: size(1px) solid var(--#{$color});
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == basic or $color == secondary or $color == gray) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          border-color: if($color==light, var(--light), var(--#{$color}-#{$state}));
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
          @if get("bootstrap.status") {
            color: if($color == secondary or $color == basic, sat($color), var(--#{$color}));
          }
        }
      }
    }
  }
}

/**
  Template (ghost): ghost styles
 */
%ghost {
  content: "";
  border: size(1px) solid transparent;
  @each $color, $value in get("color.state") {
    &-#{"" + $color} {
      background-color: transparent;
      border: size(1px) solid transparent;
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == secondary or $color == basic or $color == gray) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
        }
      }
    }
  }
}

%placeholder {
  @each $color, $value in get("color.list") {
    @each $type in get("type") {
      &.#{"" + $color} {
        @if ($type==fill) {
          @include install-placeholder($color: if($color == secondary or $color==basic or $color==light, var(--#{$color}-900), var(--white)), $opacity: get("element.input.placeholder.opacity"));
        } @else {
          &.#{$type} {
            @include install-placeholder($color: if($color == light, var(--light), var(--#{$color}-900)), $opacity: get("element.input.placeholder.opacity"));
          }
        }
      }
    }
  }
}

/**
Semantic border template
*/
@each $type in get("type") {
  @each $color, $value in get("color.semantic") {
    $selector: if($type==fill, ".#{$color}", ".#{$type}.#{$color}");
    %#{$type}-#{$color} {
      @if $type==fill or ($type==outline) {
        border: size(1px) solid var(--#{$color});
      }
      @if $type==outline or $type==ghost {
        color: var(--#{$color});
      }
      @if $type==ghost {
        border-color: transparent;
      }
      @each $state in get("state.current") {
        &:#{$state} {
          @if $type==fill or ($type==outline) {
            border: size(1px) solid var(--#{$color}-#{$state});
          } @else {
            border-color: transparent;
          }
        }
      }
    }
  }
}

/**
Semantic background templates
 */
@each $type in get("type") {
  @each $color, $value in get("color.semantic") {
    $selector: if($type==fill, ".#{$color}", ".#{$type}.#{$color}");
    %#{$type}-#{$color} {
      @if $type==fill {
        background-color: var(--#{$color});
        color: var(--white);
      } @else {
        background-color: transparent;
      }
      @each $state in get("state.current") {
        &:#{$state} {
          @if $type==fill {
            background-color: var(--#{$color}-#{$state});
          } @else if ($type == outline or $type == ghost) {
            background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
          }
        }
      }
    }
  }
}

/**
Semantic input colors
 */
%semantic-input {
  @each $type in get("type") {
    @each $color, $value in get("color.semantic") {
      $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
      #{$selector} {
        // @if $type==fill or $type==outline {
        border: size(1px) solid var(--#{$color});
        // }

        @each $state in get("state.current") {
          &:#{$state} {
            border-color: var(--#{$color}-#{$state}-rgb);
          }
        }
      }
    }
  }
}

/*
Standardization: Button
 */
%button {
  font-weight: normal;
  border-radius: get("border.radius");
  cursor: pointer;
  white-space: nowrap;
  @extend %padding-button, %padding-button-medium;
  @extend %fill, %fill-secondary, %size-medium;
  @extend %button-customize, %button-customize-fill-secondary !optional;
}

/**
Standardization: Input
 */
%input {
  border-radius: get("border.radius");
  @extend %fill, %fill-basic, %size-medium, %padding-input, %padding-input-medium, %placeholder;
  @extend %semantic-input;
  @extend %input-customize, %input-customize-fill-secondary !optional;
  cursor: pointer;

  &:not([type]), &[type~="text"], &[type~="password"] {
    &:focus {
      background-color: var(--white) !important;
      border: size(1px) solid var(--info) !important;
      color: var(--dark-900) !important;
    }
  }
}

/**
Standardization Checkbox and Radio
 */
%check-radio-size {
  @each $size, $value in get("size") {
    &-#{$size} {
      $top-bottom-size: size((map-get($value, height) - 14px) / 2);
      margin: $top-bottom-size size(5px) $top-bottom-size 0;

      & + label {
        @extend %label-#{$size}
      }
    }
  }
}

/**
Color generate
 */
#{get("root")} {
  @each $type in get("type") {
    @each $color, $value in get("color.list") {
      $selector: if($type==fill, ".#{$color}", ".#{$type}.#{$color}");
      #{$selector} {
        @extend %#{$type};
        @extend %#{$type}-#{"" + $color};
      }
    }
  }
}
