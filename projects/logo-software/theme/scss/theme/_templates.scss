/**
  Template (fill): fill styles
 */
%fill {
  border: size(1px) solid transparent;
  outline: none;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      background-color: var(--#{$color});
      color: if($color == secondary or $color == basic or $color==light, mix-darkener($color), var(--white));
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: var(--#{$color}-#{$state});
          // border-color: if($color == light, var(--light), var(--#{$color}-#{$state}));
        }
      }
    }
  }
  @extend %border;
}

/**
  Template (outline): outline styles
 */
%outline {
  background-color: transparent;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      border: size(1px) solid var(--#{$color});
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == secondary or $color == basic or $color == light) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          border-color: if($color==light, var(--light), var(--#{$color}-#{$state}));
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
        }
      }
    }
  }
  @extend %border;
}


/**
  Template (ghost): ghost styles
 */
%ghost {
  border: size(1px) solid transparent;
  background-color: transparent;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      border: size(1px) solid transparent;
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == secondary or $color == basic or $color == light) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
        }
      }
    }
  }
  @extend %border;
}

/**
  Template semantic color borders
 */
%border {
  @each $color, $value in get("color.semantic") {
    &.#{$color} {
      border: size(1px) solid if($color == light, var(--light), var(--#{$color}));
      @each $state in get("state.current") {
        &:#{$state} {
          border: size(1px) solid if($color == light, var(--light), var(--#{$color}--#{$state}));
        }
      }
    }
  }
}


%placeholder {
  @each $color, $value in get("color.state") {
    @each $type in get("type") {
      &.#{$color} {
        @if ($type==fill) {
          @include install-placeholder(if($color == secondary or $color==basic or $color==light, var(--#{$color}-800), var(--white)));
        } @else {
          &.#{$type} {
            @include install-placeholder(if($color == secondary or $color==basic or $color==basic, var(--#{$color}-800), var(--#{$color}-800)));
          }
        }
      }
    }
  }
}

@mixin extender($element) {
  border-radius: get("border.radius");
  @each $type, $color-names in get($element+".render") {
    &.#{$type} {
      @extend %#{$type};
    }

    @if not $color-names==false {
      @each $color in if($color-names==true, get("color.state"), $color-names) {
        $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
        #{$selector} { // if type fill render just `color` class else render `outline.color` and `ghost.color` classes
          @extend %#{$type}.#{$color};
          @if exist($element+".customize") and exist($element+".customize.active") and get($element+".customize.active") {
            @if ($color == secondary or $color == basic or $color == light) {
              color: var(get($element+".customize.font.color"));
            }
            @if $type == outline {
              border: size(1px) solid if($color==light, var(--light), var(#{get($element+".customize.border.default")}));
              &:active, &:focus, &:hover {
                border: size(1px) solid if($color==light, var(--light), var(#{get($element+".customize.border.default")}));
              }
            }
            @if ($type==outline or $type==ghost) {
              @each $state in get('state.current') {
                &:#{$state} {
                  background-color: rgba(var(--gray-#{get("color.shade-state.hover")}-rgb), var(--ghost-#{$state}));
                }
              }
            }
          }
        }
      }
    }
  }
}
