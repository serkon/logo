/**
  Template (fill): fill styles
 */
// @debug join(get("color.state"), get("color.semantic"));


%fill {
  border: size(1px) solid transparent;
  outline: none;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      background-color: var(--#{$color});
      color: if($color == secondary or $color == basic or $color==light, var(--text-900), var(--white));
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: var(--#{$color}-#{$state});
          // border-color: if($color == light, var(--light), var(--#{$color}-#{$state}));
        }
      }
    }
  }
}

/**
  Template (outline): outline styles
 */
%outline {
  background-color: transparent;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      border: size(1px) solid var(--#{$color});
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == secondary or $color == basic) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          border-color: if($color==light, var(--light), var(--#{$color}-#{$state}));
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
        }
      }
    }
  }
}

/**
  Template (ghost): ghost styles
 */
%ghost {
  border: size(1px) solid transparent;
  background-color: transparent;
  @each $color, $value in get("color.state") {
    &.#{$color} {
      border: size(1px) solid transparent;
      // color: if($color == secondary or $color == basic, mix-darkener($color), var(--#{$color}));
      @if not ($color == secondary or $color == basic) {
        color: var(--#{$color});
      }
      @each $state in get("state.current") {
        &:#{$state} {
          background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
        }
      }
    }
  }
}

%placeholder {
  @each $color, $value in get("color.list") {
    @each $type in get("type") {
      &.#{$color} {
        @if ($type==fill) {
          @include install-placeholder(if($color == secondary or $color==basic or $color==light, var(--#{$color}-800), var(--white)));
        } @else {
          &.#{$type} {
            @include install-placeholder(if($color == light, var(--light), var(--#{$color}-800)));
          }
        }
      }
    }
  }
}


%buttton-customize {
  @if get("customize") {
    @each $type in get("type") {
      @each $color in get("color.state") {
        $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
        #{$selector} { // if type fill render just `color` class else render `outline.color` and `ghost.color` classes
          @if ($color == secondary or $color == basic) {
            color: var(get("element.button.customize.font.color"));
          }
          @if $type == outline {
            border: size(1px) solid if($color==light, var(--light), var(#{get("element.button.customize.border.default")}));
            &:active, &:focus, &:hover {
              border: size(1px) solid if($color==light, var(--light), var(#{get("element.button.customize.border.default")}));
            }
          }
          @if ($type==outline or $type==ghost) {
            @each $state in get('state.current') {
              &:#{$state} {
                background-color: rgba(var(--text-500-rgb), var(--ghost-#{$state}));
              }
            }
          }
        }
      }
    }
  }
}


%extender {
  border-radius: get("border.radius");
  @each $type in get("type") {
    &.#{$type} {
      @extend %#{$type};
    }
    @each $color in get("color.state") {
      $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
      #{$selector} { // if type fill render just `color` class else render `outline.color` and `ghost.color` classes
        @extend %#{$type}.#{$color};
      }
    }
  }
}

/**
Template semantic color borders
*/
%semantic {
  @each $type in get("type") {
    @each $color, $value in get("color.semantic") {
      $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
      #{$selector} {
        @if $type==fill or ($type==outline and get("customize")==false) {
          border: size(1px) solid if($color == light, var(--light), var(--#{$color}));
        }
        @if $type==outline or $type==ghost {
          color: var(--#{$color});
        }
        @each $state in get("state.current") {
          &:#{$state} {
            @if $type==fill or ($type==outline and get("customize")==false) {
              border: size(1px) solid var(--#{$color}-#{$state});
            } @else {
              border-color: transparent;
            }
          }
        }
      }
    }
  }
}

%semantic-background {
  @each $type in get("type") {
    @each $color, $value in get("color.semantic") {
      $selector: if($type==fill, "&.#{$color}", "&.#{$type}.#{$color}");
      #{$selector} {
        @if $type==fill {
          background-color: var(--#{$color});
          color: var(--white);
        } @else {
          background-color: transparent;
        }
        @each $state in get("state.current") {
          &:#{$state} {
            @if $type==fill {
              background-color: var(--#{$color}-#{$state});
            } @else if ($type == outline or $type == ghost) and get("customize") == false {
              background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
            }
          }
        }
      }
    }
  }
}
