$custom-control-width: size(14px);
$custom-control-padding: 0;
.custom-control {

  padding-left: $custom-control-padding;
  margin: 0;

  &-inline {
    align-items: center;
    margin-right: size(20px);
  }

  input {
    opacity: 1;
    z-index: 0;

    & + label {
      margin-bottom: 0;

      &::before, &::after {
        display: none;
      }
    }
  }

  @each $size, $value in get("size") {
    &.#{$size} {
      label {
        @extend label.#{$size};
      }
    }
  }
}

.custom-checkbox {
  input {
    display: inline-block !important;
    width: $custom-control-width !important;

    &:checked, &:indeterminate {
      & + label {
        &::before {
          border-radius: size(get("border.radius"));
        }

        &::after {
          background-color: var(--info);
          border-radius: size(get("border.radius"));
        }
      }
    }
  }
}

.custom-switch {
  @extend .custom-switch.medium;

  input {
    display: none;

    & + label {
      display: inline-flex;
      align-items: center;

      &::before {
        background-color: var(--basic);
      }

      &::before, &::after {
        position: absolute;
        border: none;
        pointer-events: auto;
        display: inline-block;
      }

      &::before {
        top: 0;
      }

      &::after {
        background-color: var(--white);
        border-radius: 50%;
        box-shadow: 0 0 size(4px) 0 var(--gray-50);
      }
    }

    &:checked {
      & + label {
        &::before {
          background-color: var(--info-500);
        }

        &::after {
          background-color: var(--white);
          box-shadow: 0 0 size(4px) 0 #00000040;
        }
      }
    }
  }

  @each $color, $color-value in get("color.state") {
    &.#{$color} {
      input {
        &:checked {
          & + label {
            &::before {
              background-color: var(--#{$color}-500);
            }
          }
        }
      }
    }
  }

  @each $size, $value in get("size") {
    &.#{$size} {
      $width: size(get("element.switch.size."+$size+".width"));
      $circle-padding: size(get("element.switch.size."+$size+".circle-padding"));
      $padding-left: $width + size(5px);
      $height: size(map-get($value, height));
      $after-size: size($height - $circle-padding * 2);
      padding-left: $padding-left;

      input {
        & + label {
          @extend .#{$size};

          &::before {
            width: $width;
            left: $padding-left * -1;
            height: $height;
            border-radius: $height / 2;
          }

          &::after {
            left: ($padding-left - $circle-padding) * -1;
            background-color: var(--white);
            border-radius: 50%;
            top: $circle-padding;
            height: $after-size;
            width: $after-size;
          }
        }

        &:checked {
          & + label {
            &::after {
              left: ($after-size + size(17px) + $circle-padding) * -1;
            }
          }
        }
      }
    }
  }
}

th {
  .custom-switch {
    label {
      &::before {
        box-shadow: 0 0 size(4px) rgba(0, 0, 0, 0.4);
      }
    }
  }
}

