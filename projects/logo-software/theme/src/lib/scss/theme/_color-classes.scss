$secondary-font-darkened: darken(color(#{secondary}-600), get("form.secondary-font-darkener"));

/**
  Template (outline & ghost): ghost and outline common styles
 */
%ghost-outline {
  @each $color, $value in get("color.list") { // colors
    &.#{$color} {
      background: none;
      @if ($color == secondary) {
        color: $secondary-font-darkened;
      } @else if ($color == gray) {
        color: var(--#{$color}-#{get("form.dark-shade")});
      } @else if ($color == light) {
        color: var(--dark-#{get("form.dark-shade")});
      } @else if ($color == dark) {
        color: var(--white);
      } @else {
        color: var(--#{$color});
      }
      @each $state in get("form.states") { // states
        &:not(:disabled) {
          &:#{$state} {
            @if ($color == secondary) {
              background-color: rgba(var(--#{$color}-#{$state}-rgb), (color(ghost-#{$state}) + 0.2));
            } @else if ($color == light) {
              background-color: rgba(var(--light-hover-rgb), (color(ghost-#{$state}) + 0.2));
            } @else if ($color == dark) {
              background-color: rgba(var(--white), (color(ghost-#{$state}) + 0.2));
            } @else {
              background-color: rgba(var(--#{$color}-#{$state}-rgb), var(--ghost-#{$state}));
            }
          }
        }
      }
    }
  }
}

/**
  Template (fill & ghost): fill and ghost common styles
 */
%fill, %ghost {
  border: none;
}

/**
  Template (outline): outline styles
 */
%outline {
  @each $color, $value in get("color.list") {
    &.#{$color} {
      border: size(1px) solid if($color == light, var(--light-600), if($color== secondary, var(--secondary-600), if($color == dark, var(--white), var(--#{$color}-500))));
    }
  }
}

/**
  Template (ghost): ghost styles
 */
%ghost {
}

/**
 Template (fill): fill styles
 */
@each $type in get("form.types") {
  @if ($type == fill) {
    %#{$type} {
      @each $color, $color-value in get("color.list") {
        &.#{$color} {
          background-color: var(--#{$color}-500);
          color: if($color == light, var(--dark-#{get("form.dark-shade")}), if($color == secondary, $secondary-font-darkened, var(--white)));
          @each $state in get("form.states") {
            &:#{$state} {
              &:not(:disabled) {
                background-color: var(--#{$color}-#{$state});
              }
            }
          }
        }
      }
    }
  }
}

/**
  All brand colors have shades(brand-50 to 900, etc.), shadowed, and selected color version.
 */
@each $color, $value in get("color.list") {
  .#{$color} {
    &.shadow {
      box-shadow: 0 size(7px) size(10px) size(-4px) var(--#{$color});
    }

    &.selected {
      outline: size(2px) solid var(--#{$color}-focus);
    }
  }

  @each $name, $ratio in get("color.shades") {
    $tempColor: if($name >= 500, shade($value, $ratio), tint($value, $ratio));
    .#{$color}-#{$name} {
      background-color: $tempColor;
    }
  }
}

/**
  Disabled element display setting
 */
:disabled {
  opacity: get("color.disabled-opacity");
  pointer-events: none;
}

/**
  Extend classes
 */
@if get("extend-colors")==true {
  // #{get("selector")} {
  @each $type in get("form.types") {
    @each $color, $color-value in get("color.list") {
      @if ($type==fill) {
        .#{$color} {
          @extend %fill;
        }
      }
    }
  }

  .outline, .ghost {
    @extend %ghost-outline;
  }

  .ghost {
    @extend %ghost;
  }

  .outline {
    @extend %outline;
  }
  // }
}

