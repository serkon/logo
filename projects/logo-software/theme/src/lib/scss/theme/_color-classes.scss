$secondary-font-darkened: darken(color(#{secondary}-600), get("form.secondary-font-darkener"));

#{get("selector")} {
  @each $status, $hex-value in get("color.list") {
    .#{$status} {
      @each $type in get("form.types") {
        @if $type != outline and $type != ghost {
          background-color: var(--#{$status}-500);
          border-color: var(--#{$status}-500);
          color: if($status == light, var(--dark-#{get("form.dark-shade")}), if($status == secondary, $secondary-font-darkened, var(--white)));
          @each $state in get("form.states") {
            &:#{$state} {
              &:not([disabled]) {
                background-color: var(--#{$status}-#{$state});
                border-color: var(--#{$status}-500);
              }
            }
          }
        } @else {
          &.#{$type} {
            background-color: transparent;
            @if $type == outline {
              border-color: if($status == light, var(--light-600), if($status== secondary, var(--secondary-600), if($status == dark, var(--white), var(--#{$status}-500))));
            } @else {
              border-color: transparent;
            }
            @if ($status == secondary) {
              color: $secondary-font-darkened;
            } @else if ($status == gray) {
              color: var(--#{$status}-#{get("form.dark-shade")});
            } @else if ($status == light) {
              color: var(--dark-#{get("form.dark-shade")});
            } @else if ($status == dark) {
              color: var(--white);
            } @else {
              color: var(--#{$status});
            }
            @each $state in get("form.states") {
              &:#{$state} {
                &:not([disabled]) {
                  @if ($type == ghost) {
                    border-color: transparent;
                  }
                  @if ($status == secondary) {
                    background-color: rgba(var(--#{$status}-#{$state}-rgb), (color(ghost-#{$state}) + 0.2));
                  } @else if ($status == light) {
                    background-color: rgba(var(--light-hover-rgb), (color(ghost-#{$state}) + 0.2));
                  } @else if ($status == dark and $type==outline) {
                    border-color: var(--white);
                  } @else if ($status == dark and $type==ghost) {
                    background-color: rgba(var(--light-hover-rgb), (color(ghost-#{$state}) + 0.2));
                  } @else {
                    background-color: rgba(var(--#{$status}-#{$state}-rgb), var(--ghost-#{$state}));
                  }
                }
              }
            }
          }
        }
      }

      @include animate();
      outline: none;

      &.shadow {
        box-shadow: 0 size(7px) size(10px) size(-4px) var(--#{$status});
      }

      &.selected {
        background-color: var(--#{$status}-focus);
      }

      &:disabled {
        opacity: get("color.disabled-opacity");
      }
    }

    @each $name, $ratio in get("color.shades") {
      $tempColor: if($name >= 500, shade($hex-value, $ratio), tint($hex-value, $ratio));
      .#{"" + $status}-#{$name} {
        background-color: $tempColor;
        border-color: $tempColor;

        $temp-class-names: '';
        @each $state in get("form.states") {
          $temp-class-names: $temp-class-names + "&" + ":" + $state + ",";
        }

        #{$temp-class-names} {
          border-color: $tempColor;
        }
      }
    }
  }
}
